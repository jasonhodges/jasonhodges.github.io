[{"attributes":{"layout":"post","title":"Angular Conditional Number Format","topic":"angular","categories":"blog","permalink":"/blog/Angular-Conditional-Number-Format/","comments":true,"excerpt":"Solution to a little number formatting issue I worked out","seo__desc":"directive to format a number depending on type","seo__key":"Angular, AngularJS, directives, formatting, Denver CO","urlTitle":"Angular-Conditional-Number-Format","id":0},"body":"This is just a bit of code demonstrating the ability to use Angular's inline filtering capability to format numbers depending on another piece of data. I had a scenario where the numbers passed to the view could represent numeric units or monetary units. In order to keep the code lean and reusable I chose the following method. \n\nThe three lines below reside in the directive template file. \n\n`liability-list.template.html`\n\n```HTML\nAvailable: {{ (t.UnitType == \"Dollars\") ? (t.UnitsAvailable | currency:'$') : (t.UnitsAvailable | number:0) }}\nUsed: {{ (t.UnitType == \"Dollars\") ? (t.UnitsUsed | currency:\"$\") : (t.UnitsUsed | number:0) }}\nMax: {{ (t.UnitType == \"Dollars\") ? (t.UnitValue | currency:\"$\") : (t.UnitValue | number:0) }}\n```\n\nThis is the directive that handles it all. \n\n\n`liabilityItem.directive.js`\n```JavaScript\n(function () {\n  'use strict';\n\n  angular\n    .module('starter')\n    .directive('liabilityItem', liabilityItem);\n\n  function liabilityItem() {\n    var directive = {\n      scope: {\n        t: '=itemData',\n      },\n      templateUrl: './liability-list.template.html',\n      link: link,\n      restrict: 'E'\n    };\n    return directive;\n  }\n})();\n```\n\n\nLastly, this is the snippet of code from within the index file of the view.  The 'tier' is an array of objects provided via controller.\n\n`index.html`\n```HTML\n<liability-Item\n  ng-repeat=\"t in tier\"\n  item-data=\"t\">\n</liability-Item>\n```\n","frontmatter":"layout : post\ntitle : Angular Conditional Number Format\ntopic: angular\ncategories : blog\npermalink : /blog/Angular-Conditional-Number-Format/\ncomments : true\nexcerpt: Solution to a little number formatting issue I worked out\nseo__desc : directive to format a number depending on type\nseo__key : Angular, AngularJS, directives, formatting, Denver CO","path":"assets/posts/2016-03-03-angular-conditional-number-format.md"},{"attributes":{"layout":"post","title":"Angular Dynamic Styles","topic":"angular","categories":"blog","permalink":"/blog/Angular-Dynamic-Styles/","comments":true,"excerpt":"Solution to a problem that needed dynamic styling.","seo__desc":"solution to produce dynamic styling","seo__key":"Angular, styling, Angular Material, Denver CO","urlTitle":"Angular-Dynamic-Styles","id":1},"body":"Material Tabs have a default min-width of `160px` so the ink bar looks wide for any tab names that are short. The request was to have the ink bar extend approximitely `4px` from the left and right sides of the tab text. In order to acheive this in a way that would be dynamic to account for changes in tab font size or text, the below solution was developed. \n\nThe `nav` component was given a template name of `#shopNav`\n```html\n<nav mat-tab-nav-bar #shopNav class=\"shop-nav-tabs\" [disableRipple]=\"true\" [backgroundColor]=\"'white'\">\n```\n\nNext, the individual tabs where given a `(click)` event that calls a function, passing in a numerical value of the index for the tab.\n```html\n    <a mat-tab-link\n       [routerLink]=\"shopLinks[0].path\"\n       routerLinkActive #rlaa=\"routerLinkActive\"\n       (click)=\"doSomething(0)\"\n       [active]=\"rlaa.isActive\">\n        {{shopLinks[0].label}}\n    </a>\n    <div class=\"pad-lg-l\"></div>\n    <a mat-tab-link\n       [routerLink]=\"shopLinks[1].path\"\n       routerLinkActive #rlab=\"routerLinkActive\"\n       (click)=\"doSomething(1)\"\n       [active]=\"rlab.isActive\">\n        {{shopLinks[1].label}}\n    </a>\n    <div class=\"pad-xl-l\"></div>\n    <a mat-tab-link\n       [routerLink]=\"shopLinks[2].path\"\n       routerLinkActive #rlac=\"routerLinkActive\"\n       (click)=\"doSomething(2)\"\n       [active]=\"rlac.isActive\">\n        {{shopLinks[2].label}}\n    </a>\n</nav>\n```\n\nThis takes care of the template for the Material Tab component. \n\n---\n\nLets walk from the top down through the component class, explaining each piece of the solution.\n```Typescript\nimports...\n\n@Component({\n    selector: 'smp-shop',\n    templateUrl: './shop.component.html',\n    styleUrls: ['./shop.component.scss']\n})\nexport class ShopComponent implements OnInit, AfterViewInit, OnDestroy {\n```\nWe declare the nav template name as a `ViewChild` within the component. This provides us access to a plethora of values under the `nativeElement`. \n```Typescript\n    @ViewChild('shopNav') shopNav: any;\n```\nThe variable `inkBar` is declared and typed as `ElementRef`. Once the view has been initialized, `inkBar` will be assigned the value of `this.shopNav._inkbar._elementRef`. This allows us to type `this.inkBar.nativeElement` instead of having to remember to type `this.shopNav._inkBar._elementRef.nativeElement`.\n```Typescript\n    inkBar: ElementRef;\n\n    shopLinks = [\n        { path: 'plans', label: 'Plans' },\n        { path: 'phones', label: 'Phones' },\n        { path: 'accessories', label: 'Accessories' }\n    ];\n    activeInkBarClass: string;\n```\nThe variable `routerEventsUnsubscribe` is declared and typed as a new `Subject`. You'll see within `ngOnInit()`, we are using this variable inside `takeUntil` (provided via rxjs) so that we unsubscribe to our `router.events`. I subscription to `router.events` was necessary because the function to dynamically size the inkBar needs to be called whether a user clicks on a tab, navigates forward or backward, or navigates to the page via URL.\n```Typescript\n    routerEventsUnsubscribe = new Subject<void>();\n\n    constructor(public router: Router, public renderer: Renderer2) {}\n\n    ngOnInit() {\n        this.router.events.takeUntil(this.routerEventsUnsubscribe).subscribe((e: Event) => {\n            if (e instanceof NavigationEnd) {\n                switch (e.url) {\n                    case '/shop/plans':\n                        this.doSomething(0);\n                        return;\n                    case '/shop/phones':\n                        this.doSomething(1);\n                        return;\n                    case '/shop/accessories':\n                        this.doSomething(2);\n                        return;\n                }\n            }\n        });\n        this.router.navigateByUrl('shop/plans');\n\n        this.shopNav._inkBar._elementRef.nativeElement.classList.add('plans');\n    }\n```\nAs previously described, the variable `inkBar` is assigned after the view has initialized. The function (poorly & temporarily named..) `doSomething` is also called with the default landing path index of 0. \n```Typescript\n    ngAfterViewInit() {\n        this.inkBar = this.shopNav._inkBar._elementRef;\n        this.doSomething(0);\n    }\n```\nUpon component destruction, we set `this.routerEventsUnsubscribe.complete()` so the subscription to `router.events` is terminated.\n```Typescript\n    ngOnDestroy() {\n        this.routerEventsUnsubscribe.next();\n        this.routerEventsUnsubscribe.complete();\n    }\n```\nIn order to base the inkBar width off the tab text width, the `min-width` for `.mat-tab-link` had to be changed from `160px` to `fit-content`. `doSomething` receives a number for the index coorsponding to the active tab. First we grab the `offsetWidth` and `offsetLeft` of the `tabLink`'s nativeElement. \nSince the default padding on the tabs was `24px` and the request was to have the inkBar extend `4px` for left and right sides of the tab text, we create a variable `widthMinusPadding` and assign it a value of `width - 40`. The `left` value of the inkBar also needed to be adjusted, hence the `leftMinus` const that was created. Utilizing the `renderer` functionallity from Angular, we can then remove the existing `width` and `left` style values from the inkBar and assign it the newly created values. These functions are wrapped in a `setTimeout` call to allow for the inkbar element to become available.\n```Typescript\n    doSomething(index: number) {\n        const width = this.shopNav._tabLinks._results[index]._elementRef.nativeElement.offsetWidth;\n        const left = this.shopNav._tabLinks._results[index]._elementRef.nativeElement.offsetLeft;\n        const widthMinusPadding = width - 40 + 'px';\n        const leftMinus = left - 20 + 'px';\n        this.inkBar.nativeElement.classList.remove(this.activeInkBarClass);\n        setTimeout(() => {\n            this.renderer.removeStyle(this.inkBar.nativeElement, 'width');\n            this.renderer.setStyle(this.inkBar.nativeElement, 'width', widthMinusPadding);\n            this.renderer.removeStyle(this.inkBar.nativeElement, 'left');\n            this.renderer.setStyle(this.inkBar.nativeElement, 'left', leftMinus);\n        }, 100);\n        this.activeInkBarClass = this.shopLinks[index].path;\n    }\n}\n```\n\n![](assets/images/0D1DE51C95067099AA773EFD740EE10D.jpg)\n\n![](assets/images/CD1C8F4D7EC48D11AF9B7D00C61C7472.jpg)\n\n![](assets/images/CA50A1A0F7162AFA5238174AFB3236B2.jpg)\n\n","frontmatter":"layout : post\ntitle : Angular Dynamic Styles\ntopic: angular\ncategories : blog\npermalink : /blog/Angular-Dynamic-Styles/\ncomments : true\nexcerpt: Solution to a problem that needed dynamic styling.\nseo__desc : solution to produce dynamic styling\nseo__key : Angular, styling, Angular Material, Denver CO","path":"assets/posts/2018-05-01-dynamic-styles.md"}]